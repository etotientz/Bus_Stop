[1mdiff --git a/local_group.py b/local_group.py[m
[1mindex cc59197..7dabd92 100644[m
[1m--- a/local_group.py[m
[1m+++ b/local_group.py[m
[36m@@ -5,72 +5,41 @@[m [mfrom lib import *[m
 [m
 [m
 [m
[31m-trailpoint=[][m
[31m-[m
[31m-[m
[31m-[m
[31m-    #def read_data(file_name):[m
[31m-        """ reads the file named file_name and stores it in data_lines """[m
[31m-[m
[31m-        input_file= open(file_name,'r')[m
[31m-        temp= input_file.readlines()[1:][m
[31m-        #print temp[m
[31m-[m
[31m-        time_stamp = temp[0].split()[0].split(',')[m
[31m-        time = [int(i) for i in time_stamp[-1].split(':')][m
[31m-        hr,minu,sec=time[0],time[1],time[2][m
[31m-	for i in temp:[m
[31m-            each_line = i[m
[31m-            line = each_line.split(',')[m
[31m-            time_stamp = line[2].split()[0][m
[31m-            time = [int(j) for j in time_stamp.split(':')][m
[31m-            trailpoint.append(each_line)[m
[31m-            [m
[31m-	input_file.close()[m
[31m-        [m
[31m-     """def compare_time(self,time1,time2):[m
[32m+[m[32mtemp=[][m
[32m+[m[32mlocal_group_data=[][m
[32m+[m[32mlocal_group_leader=[][m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[41m    [m
[32m+[m
[32m+[m[32minput_file= open(file_name,'r')[m
[32m+[m[32mtemp= input_file.readlines()[1:][m
[32m+[m[32m"""for i in temp:[m
[32m+[m[32m    trailpoint.append(i)[m
[32m+[m[32mtime_stamp = temp[0].split()[0].split(',')[m
[32m+[m[32mtime = [int(i) for i in time_stamp[-1].split(':')][m
[32m+[m[32mhr,minu,sec=time[0],time[1],time[2][m
[32m+[m[32mfor i in temp:[m
[32m+[m[32m        each_line = i[m
[32m+[m[32m        line = each_line.split(',')[m
[32m+[m[32m        time_stamp = line[2].split()[0][m
[32m+[m[32m        time = [int(j) for j in time_stamp.split(':')][m
[32m+[m[32m        trailpoint.append(each_line)"""[m
         [m
[31m-        for i in xrange(0,len(time1)):[m
[31m-            if(time1[i] > time2[i] ):[m
[31m-                return 1[m
[31m-            elif(time1[i] < time2[i] ):[m
[31m-                return -1[m
[31m-            else:[m
[31m-                continue[m
[31m-        return 0"""[m
[31m-[m
[31m-      def process_line(raw_data):[m
[32m+[m[41m     [m
[32m+[m[32mdef process_line(raw_data):[m
         """ Takes a line of raw gps data and returns latitude,longitude and timestamp """[m
 [m
[31m-        line= raw_data.split(',')[m
[31m-        #print line[m
[31m-        latitude, longitude, timestamp = line[0],line[1], line[2].split()[0][m
[31m-        return latitude,longitude, timestamp[m
[31m-[m
[31m-     def get_zero_speed_data():[m
[31m-        """ [m
[31m-            stores the duplicate contiguous points in a list. [m
[31m-            compare each line of gps data with the next one, group them if they are same[m
[31m-            and store them in the list zero_speed_data once a different line of data has been[m
[31m-            found and start a new group.[m
[31m-            the list zero_speed_data contains only the first point of each group and contains[m
[31m-            an additional attribute count to store the number of duplicate contiguous points present (excluding itself).[m
[31m-[m
[31m-            output list: latitude,longitude,timestamp,count,local_group_number[m
[31m-                         where count= number of duplicate contiguous points[m
[31m-        [m
[31m-        """[m
[31m-        #print ">",self.data_lines[m
[31m-        count=0[m
[31m-        #get the first point from the raw trail data[m
[31m-[m
[31m-        if data_lines == []:[m
[31m-            return[m
[32m+[m[32m     line= raw_data.split(',')[m
[32m+[m[32m     latitude, longitude, timestamp = line[0],line[1], line[2].split()[0][m
[32m+[m[32m     return latitude,longitude, timestamp[m
 [m
[31m-        current_latitude, current_longitude, current_timestamp= process_line(data_lines[0])[m
[32m+[m[32mdef get_zero_speed_data():[m
         [m
[31m-        for next_line in data_lines[1:]:[m
[31m-            #get the next point[m
[32m+[m[32m        count=0[m
[32m+[m[32m        current_latitude, current_longitude, current_timestamp= process_line(temp[0])[m
[32m+[m[32m        for next_line in temp[1:]:[m
             next_latitude, next_longitude, next_timestamp= process_line(next_line)[m
             #if current and next points are same, duplicate points found, increment count[m
             if (current_latitude,current_longitude) == (next_latitude,next_longitude):[m
[36m@@ -79,7 +48,7 @@[m [mtrailpoint=[][m
                 #if there is at least one additional duplicate point[m
                 if count>0:[m
                     #add the first point of the group to the zero_speed_list[m
[31m-                    zero_speed_data.append([current_latitude,current_longitude,current_timestamp,count,trail_number])[m
[32m+[m[32m                    zero_speed_data.append([current_latitude,current_longitude,current_timestamp,count])[m
                     count=0 #reset count so as to mark the beginning of a new group[m
                 current_latitude, current_longitude, current_timestamp = next_latitude, next_longitude, next_timestamp[m
                 #assign the next point to be the current point, ie, it is probably the first point of a next zero-speed group[m
[36m@@ -102,7 +71,7 @@[m [mtrailpoint=[][m
         #for each point in the zero_speed_data list[m
         for each_point in zero_speed_data[1:]:[m
             #get distance between the current_point and each_point[m
[31m-            distance= dist(float(current_point[0]),float(each_point[0]),float(current_point[1]),float(each_point[1]))[m
[32m+[m[32m            distance= dist(float(current_point[0]),float(current_point[1]),float(each_point[0]),,float(each_point[1]))[m
             [m
             if distance > DISTANCE_THRESHOLD:[m
                 #create a new group[m
[36m@@ -115,7 +84,7 @@[m [mtrailpoint=[][m
             current_point= each_point #assign each_point to the current_point[m
 [m
 [m
[31m-        def get_local_group_leaders(self):[m
[32m+[m[32m        def get_local_group_leaders():[m
         [m
         """ get all of the local group leader points for all groups in a trail[m
             we store the group leader points for a trail in local_group_leader[][m
[36m@@ -135,7 +104,7 @@[m [mtrailpoint=[][m
 [m
         group=[] #stores a group of points temporarily[m
         group_number=1[m
[31m-        for each_point in self.local_group_data:[m
[32m+[m[32m        for each_point in local_group_data:[m
             #check the local group number for each point, if it is equal to  group_number append it to group[m
             if each_point[-1] == group_number:[m
                 group.append(each_point)[m
[36m@@ -147,7 +116,7 @@[m [mtrailpoint=[][m
                 group_number+=1 #create a new group[m
                 group=[] #reset group[][m
                 group.append(each_point) #add the current point to the new group[m
[31m-        self.local_group_data.pop() # removing the dummy variable[m
[32m+[m[32m            local_group_data.pop() # removing the dummy variable[m
 =======[m
  def process_line(self,raw_data,trail_number):[m
         """ Takes a line of raw gps data and returns latitude,longitude and timestamp """[m
warning: LF will be replaced by CRLF in local_group.py.
The file will have its original line endings in your working directory.
